import { Contract, ContractRunner } from 'ethers';
import { DeployTokenOptions, DeployTokenResult, TokenInfo, LiquidityConfig, FeeCollectionResult } from '../types';
/**
 * Factory contract wrapper for interacting with the Loncher token factory
 */
export declare class Factory {
    private contract;
    /**
     * Create a new Factory instance
     * @param address - Factory contract address
     * @param runner - Contract runner (provider or signer)
     */
    constructor(address: string, runner: ContractRunner);
    /**
     * Get the underlying contract instance
     */
    getContract(): Contract;
    /**
     * Deploy a new token with optional initial buy
     * @param options - Token deployment options
     * @returns Deployment result with token address and transaction details
     */
    deployToken(options: DeployTokenOptions): Promise<DeployTokenResult>;
    /**
     * Get token information by address
     * @param tokenAddress - Token contract address
     * @returns Token information
     */
    getTokenInfo(tokenAddress: string): Promise<TokenInfo>;
    /**
     * Get token market cap in BNB
     * @param tokenAddress - Token contract address
     * @returns Market cap in BNB (wei)
     */
    getTokenMarketCap(tokenAddress: string): Promise<bigint>;
    /**
     * Get all tokens deployed by a specific address
     * @param deployer - Deployer address
     * @returns Array of token addresses
     */
    getTokensByDeployer(deployer: string): Promise<string[]>;
    /**
     * Get paginated list of deployed tokens
     * @param page - Page number (0-indexed)
     * @param order - 0 for newest first, 1 for oldest first
     * @returns Array of token information
     */
    getDeploysByPage(page: number, order?: 0 | 1): Promise<TokenInfo[]>;
    /**
     * Get total number of deployed tokens
     * @returns Token count
     */
    getTokenCount(): Promise<bigint>;
    /**
     * Get liquidity configuration by ID
     * @param configId - Configuration ID
     * @returns Liquidity configuration
     */
    getLiquidityConfig(configId: number): Promise<LiquidityConfig>;
    /**
     * Get total number of liquidity configurations
     * @returns Configuration count
     */
    getLiquidityConfigCount(): Promise<bigint>;
    /**
     * Collect fees and execute buyback for a token
     * @param tokenAddress - Token contract address
     * @returns Fee collection result
     */
    collectFeesAndBuyback(tokenAddress: string): Promise<FeeCollectionResult>;
    /**
     * Get fees generated by a token
     * @param tokenAddress - Token contract address
     * @returns Total fees generated in BNB (wei)
     */
    getTokenFeesGenerated(tokenAddress: string): Promise<bigint>;
    /**
     * Get fees already claimed for a token
     * @param tokenAddress - Token contract address
     * @returns Total fees claimed in BNB (wei)
     */
    getTokenFeesClaimed(tokenAddress: string): Promise<bigint>;
    /**
     * Get the pool address for a token
     * @param tokenAddress - Token contract address
     * @returns Pool address
     */
    getTokenPool(tokenAddress: string): Promise<string>;
    /**
     * Check if token deployment is enabled
     * @returns True if enabled
     */
    isDeployCoinEnabled(): Promise<boolean>;
    /**
     * Get the platform controller address
     * @returns Controller address
     */
    getPlatformController(): Promise<string>;
    /**
     * Get the indexer contract address
     * @returns Indexer address
     */
    getIndexerAddress(): Promise<string>;
    /**
     * Get the buyback pool address
     * @returns Buyback pool address
     */
    getBuybackPool(): Promise<string>;
    /**
     * Get the buyback token address
     * @returns Buyback token address
     */
    getBuybackToken(): Promise<string>;
}
